<?php

include 'includes/autoload.php';

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_checkoutpayment_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_checkoutpayment'] = array(
      'base' => 'commerce_checkoutpayment',
      'title' => t('Credit / Debit cards (Checkout.com)'),
      'short_title' => t('Credit / Debit cards (Checkout.com)'),
      'description' => t('Payment method for Checkout.com'),
      'terminal' => FALSE,
      'offsite' => FALSE,
      'offsite_autoredirect' => FALSE,
      'callbacks' => array(
          'submit_form_submit' => 'submitFormCharge'
      ),
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the Checkout.Com payment method.
 */
function commerce_checkoutpayment_settings_default() {

  return array(
      'mode' => 'live',
      'type' => 'pci',
      'localpayment' => 'false',
      'timeout' => 60,
      'card_types' => array(),
      'payment_action' => COMMERCE_CREDIT_AUTH_ONLY,
      'autocaptime' => 0
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_checkoutpayment_settings_form($settings = array()) {
  $form = array();
  
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_checkoutpayment_settings_default();
  $form['private_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Private Key'),
      '#description' => t('The Checkout.com account secret API key to use .'),
      '#default_value' => $settings['private_key'],
  );

  $form['public_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Publishable API Key'),
      '#description' => t('The Checkout.com account publishable API key to use.'),
      '#default_value' => $settings['public_key']
  );

  $form['mode'] = array(
      '#type' => 'select',
      '#title' => t('Transaction Server'),
      '#description' => t('Perform transactions on the production server or on the testing server.'),
      '#default_value' => $settings['mode'],
      '#options' => array(
          'live' => t('Live - use for processing real transactions'),
          'preprod' => t('Pre production - use to test before setting live'),
          'test' => t('Test - sandbox for testing. Require a test account')
      )
  );

  $form['payment_action'] = array(
      '#type' => 'select',
      '#title' => t('Transaction Method'),
      '#description' => t('The processing method to use for each transaction.'),
      '#default_value' => $settings['payment_action'],
      '#options' => array(
          COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
          COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
      )
  );

  $form['autocaptime'] = array(
      '#type' => 'textfield',
      '#title' => t('Set Gateway auto capture time.'),
      '#description' => t('Set how long will the payment be capture.'),
      '#default_value' => $settings['autocaptime'],
  );

  $form['card_types'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Limit accepted credit cards to the following types (PCI only)'),
      '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
      '#options' => commerce_payment_credit_card_types(),
      '#default_value' => $settings['card_types'],
  );
  $form['localpayment'] = array(
      '#type' => 'select',
      '#title' => t('Enable LocalPayment'),
      '#options' => array(
          'true' => t('Yes'),
          'false' => t('No'),
      ),
      '#default_value' => $settings['localpayment'],
  );

  $form['type'] = array(
      '#type' => 'select',
      '#title' => t('Method Type (Pci enabled)'),
      '#description' => t('Verify gateway server SSL certificate on connection?'),
      '#options' => array(
          'pci' => t('Yes'),
          'nonpci' => t('No'),
      ),
      '#default_value' => $settings['type'],
  );

  $form['timeout'] = array(
      '#type' => 'textfield',
      '#title' => t('Set Gateway timeout.'),
      '#description' => t('Set how long request timeout on server.'),
      '#default_value' => $settings['timeout'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_checkoutpayment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $instance = getInstance($payment_method);
  return $instance->submit_form($payment_method, $pane_values, $checkout_pane, $order);
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_checkoutpayment_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

  if ($payment_method['settings']['type'] == 'pci') {
    // Validate the credit card fields.
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

    $settings = array(
        'form_parents' => array_merge($form_parents, array('credit_card')),
    );

    if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
      return FALSE;
    }
  }
  else {
    return TRUE;
  }
}

function getInstance($settings) {
  switch ($settings['settings']['type']) {
    case 'pci':
      $_instance = CheckoutApi_Lib_Factory::getInstance('methods_creditcardpci');
      break;
    default :
      $_instance = CheckoutApi_Lib_Factory::getInstance('methods_creditcard');

      break;
  }

  return $_instance;
}

function submitFormCharge($payment_method, $pane_form, $pane_values, $order, $charge) {

  $instance = getInstance($payment_method);
  return $instance->submitFormCharge($payment_method, $pane_form, $pane_values, $order, $charge);
}

/**
 * Implements hook_menu().
 */
function commerce_checkoutpayment_menu() {

  $items['checkoutapi/process'] = array(
      'title' => 'Ipn checkout',
      'page callback' => 'checkoutapipayment_process',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  return $items;
}

function checkoutapipayment_process() {
  
  $payment_method = commerce_payment_method_instance_load('commerce_checkoutpayment|commerce_payment_commerce_checkoutpayment');
  $post_data = file_get_contents('php://input');
  if ($post_data) {
    $Api = CheckoutApi_Api::getApi(array('mode' => $payment_method['settings']['mode']));
    $objectCharge = $Api->chargeToObj($post_data);


    if ($objectCharge->isValid()) {

      /*
       * Need to get track id
       */
      $order_id = $objectCharge->getTrackId();

      $order = commerce_order_load($order_id);
      $charge = $order->commerce_order_total[LANGUAGE_NONE][0];

      $transaction = commerce_payment_transaction_new('commerce_checkoutpayment', $order->order_id);
      $transaction->instance_id = $payment_method['instance_id'];
      $transaction->amount = $charge['amount'];
      $transaction->currency_code = $charge['currency_code'];

      if ($objectCharge->getCaptured()) {

        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = 'Your transaction has been successfully captured';
        commerce_payment_transaction_save($transaction);
        commerce_order_status_update($order, 'completed', $skip_save = FALSE, TRUE, $log = 'Your payment has been successfully completed');
      }
      elseif ($objectCharge->getRefunded()) {

        $transaction->message = 'Your payment has been refunded';
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        commerce_payment_transaction_save($transaction);
        commerce_order_status_update($order, 'canceled', $skip_save = FALSE, TRUE, $log = 'Your payment has been refunded');
      }
      elseif (!$objectCharge->getAuthorised()) {

        $transaction->message = 'Your payment has been canceled';
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        commerce_payment_transaction_save($transaction);
        commerce_order_status_update($order, 'canceled', $skip_save = FALSE, TRUE, $log = 'Your payment has been canceled');
      }
    }
  }
  return NULL;
}
